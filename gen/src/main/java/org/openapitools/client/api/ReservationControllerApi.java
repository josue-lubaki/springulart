/*
 * Springular REST API
 * Springular REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: josue.lubaki@uqtr.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ReservationDTOReq;
import org.openapitools.client.model.ReservationDTORes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReservationControllerApi {
    private ApiClient localVarApiClient;

    public ReservationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReservationControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for acceptReservationUsingPATCH
     * @param id Reservation ID to accept (required)
     * @param reservationDTOReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully accepted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptReservationUsingPATCHCall(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = reservationDTOReq;

        // create path and map variables
        String localVarPath = "/api/v1/reservations/accept/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptReservationUsingPATCHValidateBeforeCall(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling acceptReservationUsingPATCH(Async)");
        }
        

        okhttp3.Call localVarCall = acceptReservationUsingPATCHCall(id, reservationDTOReq, _callback);
        return localVarCall;

    }

    /**
     * Accept a reservation
     * 
     * @param id Reservation ID to accept (required)
     * @param reservationDTOReq  (optional)
     * @return ReservationDTORes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully accepted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ReservationDTORes acceptReservationUsingPATCH(Long id, ReservationDTOReq reservationDTOReq) throws ApiException {
        ApiResponse<ReservationDTORes> localVarResp = acceptReservationUsingPATCHWithHttpInfo(id, reservationDTOReq);
        return localVarResp.getData();
    }

    /**
     * Accept a reservation
     * 
     * @param id Reservation ID to accept (required)
     * @param reservationDTOReq  (optional)
     * @return ApiResponse&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully accepted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationDTORes> acceptReservationUsingPATCHWithHttpInfo(Long id, ReservationDTOReq reservationDTOReq) throws ApiException {
        okhttp3.Call localVarCall = acceptReservationUsingPATCHValidateBeforeCall(id, reservationDTOReq, null);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept a reservation (asynchronously)
     * 
     * @param id Reservation ID to accept (required)
     * @param reservationDTOReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully accepted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptReservationUsingPATCHAsync(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback<ReservationDTORes> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptReservationUsingPATCHValidateBeforeCall(id, reservationDTOReq, _callback);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReservationUsingPOST
     * @param reservationDTOReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationUsingPOSTCall(ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = reservationDTOReq;

        // create path and map variables
        String localVarPath = "/api/v1/reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReservationUsingPOSTValidateBeforeCall(ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createReservationUsingPOSTCall(reservationDTOReq, _callback);
        return localVarCall;

    }

    /**
     * Save a reservation
     * 
     * @param reservationDTOReq  (optional)
     * @return ReservationDTORes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ReservationDTORes createReservationUsingPOST(ReservationDTOReq reservationDTOReq) throws ApiException {
        ApiResponse<ReservationDTORes> localVarResp = createReservationUsingPOSTWithHttpInfo(reservationDTOReq);
        return localVarResp.getData();
    }

    /**
     * Save a reservation
     * 
     * @param reservationDTOReq  (optional)
     * @return ApiResponse&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationDTORes> createReservationUsingPOSTWithHttpInfo(ReservationDTOReq reservationDTOReq) throws ApiException {
        okhttp3.Call localVarCall = createReservationUsingPOSTValidateBeforeCall(reservationDTOReq, null);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save a reservation (asynchronously)
     * 
     * @param reservationDTOReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationUsingPOSTAsync(ReservationDTOReq reservationDTOReq, final ApiCallback<ReservationDTORes> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReservationUsingPOSTValidateBeforeCall(reservationDTOReq, _callback);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReservationUsingDELETE
     * @param id Reservation ID to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReservationUsingDELETECall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/reservations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReservationUsingDELETEValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteReservationUsingDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReservationUsingDELETECall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a reservation
     * 
     * @param id Reservation ID to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReservationUsingDELETE(Long id) throws ApiException {
        deleteReservationUsingDELETEWithHttpInfo(id);
    }

    /**
     * Delete a reservation
     * 
     * @param id Reservation ID to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReservationUsingDELETEWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteReservationUsingDELETEValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a reservation (asynchronously)
     * 
     * @param id Reservation ID to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReservationUsingDELETEAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReservationUsingDELETEValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllReservationsUsingGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllReservationsUsingGETCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllReservationsUsingGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllReservationsUsingGETCall(_callback);
        return localVarCall;

    }

    /**
     * Get all reservations
     * 
     * @return List&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public List<ReservationDTORes> getAllReservationsUsingGET() throws ApiException {
        ApiResponse<List<ReservationDTORes>> localVarResp = getAllReservationsUsingGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all reservations
     * 
     * @return ApiResponse&lt;List&lt;ReservationDTORes&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReservationDTORes>> getAllReservationsUsingGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllReservationsUsingGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ReservationDTORes>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all reservations (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllReservationsUsingGETAsync(final ApiCallback<List<ReservationDTORes>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllReservationsUsingGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ReservationDTORes>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReservationByIdUsingGET
     * @param id Reservation ID to consult (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationByIdUsingGETCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/reservations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReservationByIdUsingGETValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getReservationByIdUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getReservationByIdUsingGETCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get reservation by id
     * 
     * @param id Reservation ID to consult (required)
     * @return ReservationDTORes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public ReservationDTORes getReservationByIdUsingGET(Long id) throws ApiException {
        ApiResponse<ReservationDTORes> localVarResp = getReservationByIdUsingGETWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get reservation by id
     * 
     * @param id Reservation ID to consult (required)
     * @return ApiResponse&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationDTORes> getReservationByIdUsingGETWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getReservationByIdUsingGETValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get reservation by id (asynchronously)
     * 
     * @param id Reservation ID to consult (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationByIdUsingGETAsync(Long id, final ApiCallback<ReservationDTORes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReservationByIdUsingGETValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReservationUsingPUT
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationUsingPUTCall(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = reservationDTOReq;

        // create path and map variables
        String localVarPath = "/api/v1/reservations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReservationUsingPUTValidateBeforeCall(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateReservationUsingPUT(Async)");
        }
        

        okhttp3.Call localVarCall = updateReservationUsingPUTCall(id, reservationDTOReq, _callback);
        return localVarCall;

    }

    /**
     * Update a reservation
     * 
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @return ReservationDTORes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ReservationDTORes updateReservationUsingPUT(Long id, ReservationDTOReq reservationDTOReq) throws ApiException {
        ApiResponse<ReservationDTORes> localVarResp = updateReservationUsingPUTWithHttpInfo(id, reservationDTOReq);
        return localVarResp.getData();
    }

    /**
     * Update a reservation
     * 
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @return ApiResponse&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationDTORes> updateReservationUsingPUTWithHttpInfo(Long id, ReservationDTOReq reservationDTOReq) throws ApiException {
        okhttp3.Call localVarCall = updateReservationUsingPUTValidateBeforeCall(id, reservationDTOReq, null);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a reservation (asynchronously)
     * 
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationUsingPUTAsync(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback<ReservationDTORes> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReservationUsingPUTValidateBeforeCall(id, reservationDTOReq, _callback);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
