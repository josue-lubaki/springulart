/*
 * Springular REST API
 * Springular REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: josue.lubaki@uqtr.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ReservationDTOReq;
import org.openapitools.client.model.ReservationDTORes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReservationManagementControllerApi {
    private ApiClient localVarApiClient;

    public ReservationManagementControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReservationManagementControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createReservationUsingPOST1
     * @param reservationDTOReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationUsingPOST1Call(ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = reservationDTOReq;

        // create path and map variables
        String localVarPath = "/management/api/v1/reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReservationUsingPOST1ValidateBeforeCall(ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createReservationUsingPOST1Call(reservationDTOReq, _callback);
        return localVarCall;

    }

    /**
     * Save a reservation
     * 
     * @param reservationDTOReq  (optional)
     * @return ReservationDTORes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ReservationDTORes createReservationUsingPOST1(ReservationDTOReq reservationDTOReq) throws ApiException {
        ApiResponse<ReservationDTORes> localVarResp = createReservationUsingPOST1WithHttpInfo(reservationDTOReq);
        return localVarResp.getData();
    }

    /**
     * Save a reservation
     * 
     * @param reservationDTOReq  (optional)
     * @return ApiResponse&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationDTORes> createReservationUsingPOST1WithHttpInfo(ReservationDTOReq reservationDTOReq) throws ApiException {
        okhttp3.Call localVarCall = createReservationUsingPOST1ValidateBeforeCall(reservationDTOReq, null);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save a reservation (asynchronously)
     * 
     * @param reservationDTOReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully save a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationUsingPOST1Async(ReservationDTOReq reservationDTOReq, final ApiCallback<ReservationDTORes> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReservationUsingPOST1ValidateBeforeCall(reservationDTOReq, _callback);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReservationUsingDELETE1
     * @param id Reservation ID to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReservationUsingDELETE1Call(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/api/v1/reservations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReservationUsingDELETE1ValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteReservationUsingDELETE1(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReservationUsingDELETE1Call(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a reservation
     * 
     * @param id Reservation ID to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReservationUsingDELETE1(Long id) throws ApiException {
        deleteReservationUsingDELETE1WithHttpInfo(id);
    }

    /**
     * Delete a reservation
     * 
     * @param id Reservation ID to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReservationUsingDELETE1WithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteReservationUsingDELETE1ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a reservation (asynchronously)
     * 
     * @param id Reservation ID to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReservationUsingDELETE1Async(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReservationUsingDELETE1ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllReservationsUsingGET1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllReservationsUsingGET1Call(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/api/v1/reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllReservationsUsingGET1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllReservationsUsingGET1Call(_callback);
        return localVarCall;

    }

    /**
     * Get all reservations
     * 
     * @return List&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public List<ReservationDTORes> getAllReservationsUsingGET1() throws ApiException {
        ApiResponse<List<ReservationDTORes>> localVarResp = getAllReservationsUsingGET1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all reservations
     * 
     * @return ApiResponse&lt;List&lt;ReservationDTORes&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReservationDTORes>> getAllReservationsUsingGET1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllReservationsUsingGET1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ReservationDTORes>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all reservations (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all reservations of User </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllReservationsUsingGET1Async(final ApiCallback<List<ReservationDTORes>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllReservationsUsingGET1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ReservationDTORes>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReservationByIdUsingGET1
     * @param id Reservation ID to consult (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationByIdUsingGET1Call(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/api/v1/reservations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReservationByIdUsingGET1ValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getReservationByIdUsingGET1(Async)");
        }
        

        okhttp3.Call localVarCall = getReservationByIdUsingGET1Call(id, _callback);
        return localVarCall;

    }

    /**
     * Get a reservation by id
     * 
     * @param id Reservation ID to consult (required)
     * @return ReservationDTORes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public ReservationDTORes getReservationByIdUsingGET1(Long id) throws ApiException {
        ApiResponse<ReservationDTORes> localVarResp = getReservationByIdUsingGET1WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a reservation by id
     * 
     * @param id Reservation ID to consult (required)
     * @return ApiResponse&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationDTORes> getReservationByIdUsingGET1WithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getReservationByIdUsingGET1ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a reservation by id (asynchronously)
     * 
     * @param id Reservation ID to consult (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a reservation by id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationByIdUsingGET1Async(Long id, final ApiCallback<ReservationDTORes> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReservationByIdUsingGET1ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReservationUsingPUT1
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationUsingPUT1Call(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = reservationDTOReq;

        // create path and map variables
        String localVarPath = "/management/api/v1/reservations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReservationUsingPUT1ValidateBeforeCall(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateReservationUsingPUT1(Async)");
        }
        

        okhttp3.Call localVarCall = updateReservationUsingPUT1Call(id, reservationDTOReq, _callback);
        return localVarCall;

    }

    /**
     * Update a reservation
     * 
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @return ReservationDTORes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ReservationDTORes updateReservationUsingPUT1(Long id, ReservationDTOReq reservationDTOReq) throws ApiException {
        ApiResponse<ReservationDTORes> localVarResp = updateReservationUsingPUT1WithHttpInfo(id, reservationDTOReq);
        return localVarResp.getData();
    }

    /**
     * Update a reservation
     * 
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @return ApiResponse&lt;ReservationDTORes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationDTORes> updateReservationUsingPUT1WithHttpInfo(Long id, ReservationDTOReq reservationDTOReq) throws ApiException {
        okhttp3.Call localVarCall = updateReservationUsingPUT1ValidateBeforeCall(id, reservationDTOReq, null);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a reservation (asynchronously)
     * 
     * @param id Reservation ID to update (required)
     * @param reservationDTOReq  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated a reservation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationUsingPUT1Async(Long id, ReservationDTOReq reservationDTOReq, final ApiCallback<ReservationDTORes> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReservationUsingPUT1ValidateBeforeCall(id, reservationDTOReq, _callback);
        Type localVarReturnType = new TypeToken<ReservationDTORes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
