openapi: 3.0.3
info:
  title: Springular REST API
  description: Springular REST API
  contact:
    name: Josue Lubaki
    url: https://josue-lubaki.ca
    email: josue.lubaki@uqtr.ca
  license:
    name: Apache License Version 2.0
  version: 1.0.0
servers:
  - url: https://springulart.herokuapp.com
    description: Base Url
tags:
  - name: Registration of accounts
    description: First step in the application
  - name: Haircut consultation
    description: Collection of methods for interacting with haircuts
  - name: User Controller
    description: Collection of methods for interacting with users
  - name: Reservation Controller
    description: Collection of methods for interacting with reservations
  - name: Haircut Management Controller
    description: Operation reserved for the Administrator concerning all haircuts
  - name: User Management Controller
    description: Operation reserved for the Administrator concerning all users
  - name: Reservation Management Controller
    description: Operation reserved for the Administrator concerning all reservations
paths:
  /auth/login:
    post:
      tags:
        - Registration of accounts
      summary: Login
      description: Login to the application
      operationId: authenticateUserUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDTO'
        '400':
          description: Bad Request
  /auth/register:
    post:
      tags:
        - Registration of accounts
      summary: Register
      description: Register to the application
      operationId: registerUserUsingPOST
      parameters:
        - name: apartment
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: city
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: dob
          in: query
          required: false
          style: form
          schema:
            type: string
            format: date
        - name: email
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: fname
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: imageURL
          in: query
          required: false
          style: form
          schema:
            type: string
            format: binary
        - name: lname
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: password
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: phone
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: role
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: state
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: street
          in: query
          required: false
          style: form
          schema:
            type: string
        - name: zip
          in: query
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '201':
          description: Successfully created an account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Bad Request
  /auth/reset-password:
    post:
      tags:
        - Registration of accounts
      summary: Reset password
      operationId: resetPasswordUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDTO'
      responses:
        '200':
          description: Successfully reset password
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/v1/haircuts:
    get:
      tags:
        - Haircut consultation
      summary: Get all haircuts
      operationId: getHaircutsUsingGET
      responses:
        '200':
          description: Successfully retrieved all haircuts
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HaircutDTO'
  /api/v1/haircuts/{id}:
    get:
      tags:
        - Haircut consultation
      summary: Get haircut by id
      operationId: getHaircutUsingGET
      parameters:
        - name: id
          in: path
          description: Identifier of the hairstyle to consult
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved haircut
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HaircutDTO'
  /management/api/v1/haircuts:
    get:
      tags:
        - Haircut Management Controller
      summary: Get all haircuts
      operationId: getHaircutsUsingGET_1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HaircutDTO'
        '400':
          description: Bad Request
      security:
        - Authorization:
            - global
    post:
      tags:
        - Haircut Management Controller
      summary: Create haircut
      operationId: createHaircutUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HaircutDTO'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HaircutDTO'
        '201':
          description: Created
        '400':
          description: Bad Request
      security:
        - Authorization:
            - global
  /management/api/v1/haircuts/{id}:
    put:
      tags:
        - Haircut Management Controller
      summary: Update haircut
      operationId: updateHaircutUsingPUT
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HaircutDTO'
      responses:
        '200':
          description: Updated hair
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HaircutDTO'
        '400':
          description: Bad Request
      security:
        - Authorization:
            - global
    delete:
      tags:
        - Haircut Management Controller
      summary: Delete haircut
      operationId: deleteHaircutUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Deleted hair
        '400':
          description: Bad Request
      security:
        - Authorization:
            - global
    get:
      tags:
        - Haircut Management Controller
      summary: Get haircut by ID
      operationId: getHaircutUsingGET_1
      parameters:
        - name: id
          in: path
          description: id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HaircutDTO'
        '400':
          description: Bad Request
      security:
        - Authorization:
            - global
  /api/v1/reservations:
    get:
      tags:
        - Reservation Controller
      summary: Get all reservations
      operationId: getAllReservationsUsingGET
      responses:
        '200':
          description: Successfully retrieved all reservations of User
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDTORes'
      security:
        - Authorization:
            - global
    post:
      tags:
        - Reservation Controller
      summary: Save a reservation
      operationId: createReservationUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDTOReq'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDTORes'
        '201':
          description: Successfully save a reservation
      security:
        - Authorization:
            - global
  /api/v1/reservations/accept/{id}:
    patch:
      tags:
        - Reservation Controller
      summary: Accept a reservation
      operationId: acceptReservationUsingPATCH
      parameters:
        - name: id
          in: path
          description: Reservation ID to accept
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDTOReq'
      responses:
        '200':
          description: Successfully accepted a reservation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDTORes'
      security:
        - Authorization:
            - global
  /api/v1/reservations/{id}:
    get:
      tags:
        - Reservation Controller
      summary: Get reservation by id
      operationId: getReservationByIdUsingGET
      parameters:
        - name: id
          in: path
          description: Reservation ID to consult
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved a reservation by id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDTORes'
      security:
        - Authorization:
            - global
    put:
      tags:
        - Reservation Controller
      summary: Update a reservation
      operationId: updateReservationUsingPUT
      parameters:
        - name: id
          in: path
          description: Reservation ID to update
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDTOReq'
      responses:
        '200':
          description: Successfully updated a reservation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDTORes'
      security:
        - Authorization:
            - global
    delete:
      tags:
        - Reservation Controller
      summary: Delete a reservation
      operationId: deleteReservationUsingDELETE
      parameters:
        - name: id
          in: path
          description: Reservation ID to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: Successfully deleted a reservation
      security:
        - Authorization:
            - global
  /management/api/v1/reservations:
    get:
      tags:
        - Reservation Management Controller
      summary: Get all reservations
      operationId: getAllReservationsUsingGET_1
      responses:
        '200':
          description: Successfully retrieved all reservations of User
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationDTORes'
      security:
        - Authorization:
            - global
    post:
      tags:
        - Reservation Management Controller
      summary: Save a reservation
      operationId: createReservationUsingPOST_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDTOReq'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDTORes'
        '201':
          description: Successfully save a reservation
      security:
        - Authorization:
            - global
  /management/api/v1/reservations/{id}:
    get:
      tags:
        - Reservation Management Controller
      summary: Get a reservation by id
      operationId: getReservationByIdUsingGET_1
      parameters:
        - name: id
          in: path
          description: Reservation ID to consult
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved a reservation by id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDTORes'
      security:
        - Authorization:
            - global
    put:
      tags:
        - Reservation Management Controller
      summary: Update a reservation
      operationId: updateReservationUsingPUT_1
      parameters:
        - name: id
          in: path
          description: Reservation ID to update
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationDTOReq'
      responses:
        '200':
          description: Successfully updated a reservation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReservationDTORes'
      security:
        - Authorization:
            - global
    delete:
      tags:
        - Reservation Management Controller
      summary: Delete a reservation
      operationId: deleteReservationUsingDELETE_1
      parameters:
        - name: id
          in: path
          description: Reservation ID to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: Successfully deleted a reservation
      security:
        - Authorization:
            - global
  /api/v1/users/{id}:
    get:
      tags:
        - User Controller
      summary: Get a user by ID
      operationId: getUserUsingGET
      parameters:
        - name: id
          in: path
          description: User ID to consult
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved a user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTORes'
      security:
        - Authorization:
            - global
    put:
      tags:
        - User Controller
      summary: Update a user by ID
      operationId: updateUserUsingPUT
      parameters:
        - name: id
          in: path
          description: User ID to update
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTOReq'
      responses:
        '200':
          description: Successfully updated a user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTORes'
      security:
        - Authorization:
            - global
    delete:
      tags:
        - User Controller
      summary: Delete a user by ID
      operationId: deleteMyAccountUsingDELETE
      parameters:
        - name: id
          in: path
          description: User ID to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: Successfully Deleted a user
      security:
        - Authorization:
            - global
  /management/api/v1/users:
    get:
      tags:
        - User Management Controller
      summary: Get all users
      operationId: getUsersUsingGET
      responses:
        '200':
          description: Successfully retrieved all users
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTORes'
      security:
        - Authorization:
            - global
    post:
      tags:
        - User Management Controller
      summary: Create a new user
      operationId: registerNewUserUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupDTO'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTORes'
        '400':
          description: Bad Request
      security:
        - Authorization:
            - global
  /management/api/v1/users/{id}:
    get:
      tags:
        - User Management Controller
      summary: Get a user by ID
      operationId: getUserUsingGET_1
      parameters:
        - name: id
          in: path
          description: user ID to consult
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved a user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTORes'
      security:
        - Authorization:
            - global
    put:
      tags:
        - User Management Controller
      summary: Update a user by ID
      operationId: updateUserUsingPUT_1
      parameters:
        - name: id
          in: path
          description: user ID to update
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTOReq'
      responses:
        '200':
          description: Successfully updated a user
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTORes'
      security:
        - Authorization:
            - global
    delete:
      tags:
        - User Management Controller
      summary: Delete a user by ID
      operationId: deleteUserUsingDELETE
      parameters:
        - name: id
          in: path
          description: user ID to delete
          required: true
          style: simple
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: Successfully Deleted a user
      security:
        - Authorization:
            - global
components:
  schemas:
    AddressDTO:
      title: AddressDTO
      type: object
      properties:
        apartement:
          type: string
        city:
          type: string
        id:
          type: integer
          format: int64
        state:
          type: string
        street:
          type: string
        zip:
          type: string
    AddressModel:
      title: AddressModel
      type: object
      properties:
        apartement:
          type: string
        city:
          type: string
        id:
          type: integer
          format: int64
        state:
          type: string
        street:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserModel'
        zip:
          type: string
    AuthDTO:
      title: AuthDTO
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    CollectionModelOfReservationModel:
      title: CollectionModelOfReservationModel
      required:
        - _embedded
        - _links
      type: object
      properties:
        _embedded:
          $ref: '#/components/schemas/EmbeddedCollectionOfReservationModel'
        _links:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Link'
          description: Link collection
      description: Resources of ReservationModel
      xml:
        name: entities
        attribute: false
        wrapped: false
    CollectionModelOfUserModel:
      title: CollectionModelOfUserModel
      required:
        - _embedded
        - _links
      type: object
      properties:
        _embedded:
          $ref: '#/components/schemas/EmbeddedCollectionOfUserModel'
        _links:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Link'
          description: Link collection
      description: Resources of UserModel
      xml:
        name: entities
        attribute: false
        wrapped: false
    CredentialModel:
      title: CredentialModel
      type: object
      properties:
        created:
          type: string
          format: date
        grantedAuthority:
          type: string
        id:
          type: integer
          format: int64
        password:
          type: string
        updated:
          type: string
          format: date
        user:
          $ref: '#/components/schemas/UserModel'
        username:
          type: string
    EmbeddedCollectionOfReservationModel:
      title: EmbeddedCollectionOfReservationModel
      required:
        - reservationModels
      type: object
      properties:
        reservationModels:
          type: array
          description: Resource collection
          items:
            $ref: '#/components/schemas/ReservationModel'
      description: Embedded collection of ReservationModel
      xml:
        name: content
        wrapped: true
    EmbeddedCollectionOfUserModel:
      title: EmbeddedCollectionOfUserModel
      required:
        - userModels
      type: object
      properties:
        userModels:
          type: array
          description: Resource collection
          items:
            $ref: '#/components/schemas/UserModel'
      description: Embedded collection of UserModel
      xml:
        name: content
        wrapped: true
    EntityModelOfAddressModel:
      title: EntityModelOfAddressModel
      type: object
      properties:
        apartement:
          type: string
        city:
          type: string
        id:
          type: integer
          format: int64
        links:
          $ref: '#/components/schemas/Links'
        state:
          type: string
        street:
          type: string
        users:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserModel'
        zip:
          type: string
    EntityModelOfCredentialModel:
      title: EntityModelOfCredentialModel
      type: object
      properties:
        created:
          type: string
          format: date
        grantedAuthority:
          type: string
        id:
          type: integer
          format: int64
        links:
          $ref: '#/components/schemas/Links'
        password:
          type: string
        updated:
          type: string
          format: date
        user:
          $ref: '#/components/schemas/UserModel'
        username:
          type: string
    EntityModelOfHaircutModel:
      title: EntityModelOfHaircutModel
      type: object
      properties:
        description:
          type: string
        estimatedTime:
          type: string
        id:
          type: string
        imageURL:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        price:
          type: integer
          format: int32
        reservationModel:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
        title:
          type: string
    EntityModelOfLocationModel:
      title: EntityModelOfLocationModel
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
        links:
          $ref: '#/components/schemas/Links'
        longitude:
          type: number
          format: double
        reservationModel:
          $ref: '#/components/schemas/ReservationModel'
    EntityModelOfReservationModel:
      title: EntityModelOfReservationModel
      type: object
      properties:
        barber:
          $ref: '#/components/schemas/UserModel'
        client:
          $ref: '#/components/schemas/UserModel'
        haircut:
          $ref: '#/components/schemas/HaircutModel'
        id:
          type: integer
          format: int64
        links:
          $ref: '#/components/schemas/Links'
        location:
          $ref: '#/components/schemas/LocationModel'
        reservationDate:
          type: string
          format: date
        reservationTime:
          $ref: '#/components/schemas/ReservationTimeModel'
        status:
          type: string
    EntityModelOfReservationTimeModel:
      title: EntityModelOfReservationTimeModel
      type: object
      properties:
        hours:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        links:
          $ref: '#/components/schemas/Links'
        minutes:
          type: integer
          format: int32
        reservationModel:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
    EntityModelOfUserModel:
      title: EntityModelOfUserModel
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressModel'
        created:
          type: string
          format: date
        credential:
          $ref: '#/components/schemas/CredentialModel'
        deleted:
          type: boolean
        dob:
          type: string
          format: date
        email:
          type: string
        fname:
          type: string
        id:
          type: integer
          format: int64
        imageURL:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        lname:
          type: string
        password:
          type: string
        phone:
          type: string
        reservationModelBarber:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
        reservationModelClient:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
        role:
          type: string
        updated:
          type: string
          format: date
    HaircutDTO:
      title: HaircutDTO
      type: object
      properties:
        description:
          type: string
        estimatedTime:
          type: string
        id:
          type: string
        imageURL:
          type: string
        price:
          type: integer
          format: int32
        title:
          type: string
    HaircutModel:
      title: HaircutModel
      type: object
      properties:
        description:
          type: string
        estimatedTime:
          type: string
        id:
          type: string
        imageURL:
          type: string
        price:
          type: integer
          format: int32
        reservationModel:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
        title:
          type: string
    Link:
      title: Link
      type: object
      properties:
        deprecation:
          type: string
        href:
          type: string
        hreflang:
          type: string
        media:
          type: string
        name:
          type: string
        profile:
          type: string
        rel:
          $ref: '#/components/schemas/LinkRelation'
        title:
          type: string
        type:
          type: string
    LinkRelation:
      title: LinkRelation
      type: object
    Links:
      title: Links
      type: object
      properties:
        empty:
          type: boolean
    LocationDTO:
      title: LocationDTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    LocationModel:
      title: LocationModel
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        reservationModel:
          $ref: '#/components/schemas/ReservationModel'
    LoginDTO:
      title: LoginDTO
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
          format: int64
        role:
          type: string
        token:
          type: string
    ReservationDTOReq:
      title: ReservationDTOReq
      type: object
      properties:
        barber:
          $ref: '#/components/schemas/UserDTOReq'
        client:
          $ref: '#/components/schemas/UserDTOReq'
        haircut:
          $ref: '#/components/schemas/HaircutDTO'
        id:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/LocationDTO'
        reservationDate:
          type: string
          format: date
        reservationTime:
          $ref: '#/components/schemas/ReservationTimeDTO'
        status:
          type: string
    ReservationDTORes:
      title: ReservationDTORes
      type: object
      properties:
        barber:
          $ref: '#/components/schemas/UserDTORes'
        client:
          $ref: '#/components/schemas/UserDTORes'
        haircut:
          $ref: '#/components/schemas/HaircutDTO'
        id:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/LocationDTO'
        reservationDate:
          type: string
          format: date
        reservationTime:
          $ref: '#/components/schemas/ReservationTimeDTO'
        status:
          type: string
    ReservationModel:
      title: ReservationModel
      type: object
      properties:
        barber:
          $ref: '#/components/schemas/UserModel'
        client:
          $ref: '#/components/schemas/UserModel'
        haircut:
          $ref: '#/components/schemas/HaircutModel'
        id:
          type: integer
          format: int64
        location:
          $ref: '#/components/schemas/LocationModel'
        reservationDate:
          type: string
          format: date
        reservationTime:
          $ref: '#/components/schemas/ReservationTimeModel'
        status:
          type: string
    ReservationTimeDTO:
      title: ReservationTimeDTO
      type: object
      properties:
        hours:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        minutes:
          type: integer
          format: int32
    ReservationTimeModel:
      title: ReservationTimeModel
      type: object
      properties:
        hours:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        minutes:
          type: integer
          format: int32
        reservationModel:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
    SignupDTO:
      title: SignupDTO
      type: object
      properties:
        apartment:
          type: string
        city:
          type: string
        dob:
          type: string
          format: date
        email:
          type: string
        fname:
          type: string
        imageURL:
          type: string
        lname:
          type: string
        password:
          type: string
        phone:
          type: string
        role:
          type: string
        state:
          type: string
        street:
          type: string
        zip:
          type: string
    # TemplateVariable:
    #   title: TemplateVariable
    #   type: object
    #   properties:
    #     composite:
    #       type: boolean
    #     description:
    #       type: string
    #     name:
    #       type: string
    #     singular:
    #       type: boolean
    #     type:
    #       type: string
    #       enum:
    #         - COMPOSITE_PARAM
    #         - DOT
    #         - FRAGMENT
    #         - PATH_SEGMENT
    #         - PATH_STYLE_PARAMETER
    #         - PATH_VARIABLE
    #         - REQUEST_PARAM
    #         - REQUEST_PARAM_CONTINUED
    #         - RESERVED_STRING
    #         - SEGMENT
    #         - SIMPLE
    # UriTemplate:
    #   title: UriTemplate
    #   type: object
    #   properties:
    #     variableNames:
    #       type: array
    #       items:
    #         type: string
    #     variables:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/TemplateVariable'
    UserDTO:
      title: UserDTO
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressDTO'
        created:
          type: string
          format: date
        deleted:
          type: boolean
        dob:
          type: string
          format: date
        email:
          type: string
        fname:
          type: string
        fullName:
          type: string
        id:
          type: integer
          format: int64
        imageURL:
          type: string
        lname:
          type: string
        phone:
          type: string
        role:
          type: string
        updated:
          type: string
          format: date
    UserDTOReq:
      title: UserDTOReq
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressDTO'
        created:
          type: string
          format: date
        deleted:
          type: boolean
        dob:
          type: string
          format: date
        email:
          type: string
        fname:
          type: string
        id:
          type: integer
          format: int64
        imageURL:
          type: string
        lname:
          type: string
        phone:
          type: string
        role:
          type: string
        updated:
          type: string
          format: date
    UserDTORes:
      title: UserDTORes
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressDTO'
        created:
          type: string
          format: date
        deleted:
          type: boolean
        dob:
          type: string
          format: date
        email:
          type: string
        fname:
          type: string
        fullName:
          type: string
        id:
          type: integer
          format: int64
        imageURL:
          type: string
        lname:
          type: string
        phone:
          type: string
        role:
          type: string
        updated:
          type: string
          format: date
    UserModel:
      title: UserModel
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressModel'
        created:
          type: string
          format: date
        credential:
          $ref: '#/components/schemas/CredentialModel'
        deleted:
          type: boolean
        dob:
          type: string
          format: date
        email:
          type: string
        fname:
          type: string
        id:
          type: integer
          format: int64
        imageURL:
          type: string
        lname:
          type: string
        password:
          type: string
        phone:
          type: string
        reservationModelBarber:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
        reservationModelClient:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ReservationModel'
        role:
          type: string
        updated:
          type: string
          format: date
  securitySchemes:
    Authorization:
      type: apiKey
      name: Authorization
      in: header