package ca.ghostteam.springulart.service.impl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.anyBoolean;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import ca.ghostteam.springulart.dto.AddressDTO;
import ca.ghostteam.springulart.dto.CredentialDTO;
import ca.ghostteam.springulart.dto.SignupDTO;
import ca.ghostteam.springulart.dto.UserDTO;
import ca.ghostteam.springulart.dto.UserDetailsDTO;
import ca.ghostteam.springulart.model.AddressModel;
import ca.ghostteam.springulart.model.CredentialModel;
import ca.ghostteam.springulart.model.UserModel;
import ca.ghostteam.springulart.repository.UserRepository;
import ca.ghostteam.springulart.service.address.AddressService;
import ca.ghostteam.springulart.service.credential.CredentialService;

import java.time.LocalDate;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.Optional;

import ca.ghostteam.springulart.service.user.UserServiceImpl;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ContextConfiguration(classes = {UserServiceImpl.class})
@ExtendWith(SpringExtension.class)
class UserServiceImplTest {
    @MockBean
    private AddressService addressService;

    @MockBean
    private CredentialService credentialService;

    @MockBean
    private PasswordEncoder passwordEncoder;

    @MockBean
    private UserRepository userRepository;

    @Autowired
    private UserServiceImpl userServiceImpl;

    @Test
    void testLoadUserByUsername() throws UsernameNotFoundException {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        LocalDate ofEpochDayResult = LocalDate.ofEpochDay(1L);
        userModel1.setCreated(ofEpochDayResult);
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findUserModelByEmail(any())).thenReturn(ofResult);
        CredentialModel credentials = ((UserDetailsDTO) this.userServiceImpl.loadUserByUsername("janedoe"))
                .getCredentials();
        assertEquals(credentialModel1, credentials);
        assertEquals(userModel, ((UserDetailsDTO) this.userServiceImpl.loadUserByUsername("janedoe")).getUserModel());
        assertEquals("1970-01-02", credentials.getUpdated().toString());
        assertEquals("jane.doe@example.org", credentials.getUsername());
        assertSame(ofEpochDayResult, credentials.getCreated());
        assertEquals("Role", credentials.getGrantedAuthority());
        assertEquals(123L, credentials.getId().longValue());
        assertEquals("iloveyou", credentials.getPassword());
    }

    @Test
    void testLoadUserByUsername2() throws UsernameNotFoundException {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");
        UserModel userModel1 = mock(UserModel.class);
        when(userModel1.getId()).thenReturn(123L);
        when(userModel1.getEmail()).thenReturn("jane.doe@example.org");
        when(userModel1.getPassword()).thenReturn("iloveyou");
        when(userModel1.getRole()).thenReturn("Role");
        when(userModel1.getCreated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getUpdated()).thenReturn(LocalDate.ofEpochDay(1L));
        doNothing().when(userModel1).setAddress(any());
        doNothing().when(userModel1).setCreated(any());
        doNothing().when(userModel1).setCredential(any());
        doNothing().when(userModel1).setDeleted(anyBoolean());
        doNothing().when(userModel1).setDob(any());
        doNothing().when(userModel1).setEmail(any());
        doNothing().when(userModel1).setFname(any());
        doNothing().when(userModel1).setId(any());
        doNothing().when(userModel1).setImageURL(any());
        doNothing().when(userModel1).setLname(any());
        doNothing().when(userModel1).setPassword(any());
        doNothing().when(userModel1).setPhone(any());
        doNothing().when(userModel1).setReservationModelBarber(any());
        doNothing().when(userModel1).setReservationModelClient(any());
        doNothing().when(userModel1).setRole(any());
        doNothing().when(userModel1).setUpdated(any());
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findUserModelByEmail(any())).thenReturn(ofResult);
        CredentialModel credentials = ((UserDetailsDTO) this.userServiceImpl.loadUserByUsername("janedoe"))
                .getCredentials();
        assertEquals(credentialModel1, credentials);
        assertEquals("1970-01-02", credentials.getCreated().toString());
        assertEquals(123L, credentials.getId().longValue());
        assertEquals("iloveyou", credentials.getPassword());
        assertEquals("jane.doe@example.org", credentials.getUsername());
        assertEquals("Role", credentials.getGrantedAuthority());
        assertEquals("1970-01-02", credentials.getUpdated().toString());
        verify(this.userRepository).findUserModelByEmail(any());
        verify(userModel1).getId();
        verify(userModel1).getEmail();
        verify(userModel1).getPassword();
        verify(userModel1).getRole();
        verify(userModel1).getCreated();
        verify(userModel1).getUpdated();
        verify(userModel1).setAddress(any());
        verify(userModel1).setCreated(any());
        verify(userModel1).setCredential(any());
        verify(userModel1).setDeleted(anyBoolean());
        verify(userModel1).setDob(any());
        verify(userModel1).setEmail(any());
        verify(userModel1).setFname(any());
        verify(userModel1).setId(any());
        verify(userModel1).setImageURL(any());
        verify(userModel1).setLname(any());
        verify(userModel1).setPassword(any());
        verify(userModel1).setPhone(any());
        verify(userModel1).setReservationModelBarber(any());
        verify(userModel1).setReservationModelClient(any());
        verify(userModel1).setRole(any());
        verify(userModel1).setUpdated(any());
    }

    @Test
    void testUpdateUser() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");

        AddressModel addressModel3 = new AddressModel();
        addressModel3.setApartement("Apartement");
        addressModel3.setCity("Oxford");
        addressModel3.setId(123L);
        addressModel3.setState("MD");
        addressModel3.setStreet("Street");
        addressModel3.setUsers(new HashSet<>());
        addressModel3.setZip("21654");

        UserModel userModel2 = new UserModel();
        userModel2.setAddress(new AddressModel());
        userModel2.setCreated(null);
        userModel2.setCredential(new CredentialModel());
        userModel2.setDeleted(true);
        userModel2.setDob(null);
        userModel2.setEmail("jane.doe@example.org");
        userModel2.setFname("Fname");
        userModel2.setId(123L);
        userModel2.setImageURL("https://example.org/example");
        userModel2.setLname("Lname");
        userModel2.setPassword("iloveyou");
        userModel2.setPhone("4105551212");
        userModel2.setReservationModelBarber(new HashSet<>());
        userModel2.setReservationModelClient(new HashSet<>());
        userModel2.setRole("Role");
        userModel2.setUpdated(null);

        CredentialModel credentialModel2 = new CredentialModel();
        credentialModel2.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel2.setGrantedAuthority("JaneDoe");
        credentialModel2.setId(123L);
        credentialModel2.setPassword("iloveyou");
        credentialModel2.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel2.setUser(userModel2);
        credentialModel2.setUsername("janedoe");

        UserModel userModel3 = new UserModel();
        userModel3.setAddress(addressModel3);
        userModel3.setCreated(LocalDate.ofEpochDay(1L));
        userModel3.setCredential(credentialModel2);
        userModel3.setDeleted(true);
        userModel3.setDob(LocalDate.ofEpochDay(1L));
        userModel3.setEmail("jane.doe@example.org");
        userModel3.setFname("Fname");
        userModel3.setId(123L);
        userModel3.setImageURL("https://example.org/example");
        userModel3.setLname("Lname");
        userModel3.setPassword("iloveyou");
        userModel3.setPhone("4105551212");
        userModel3.setReservationModelBarber(new HashSet<>());
        userModel3.setReservationModelClient(new HashSet<>());
        userModel3.setRole("Role");
        userModel3.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel3 = new CredentialModel();
        credentialModel3.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel3.setGrantedAuthority("JaneDoe");
        credentialModel3.setId(123L);
        credentialModel3.setPassword("iloveyou");
        credentialModel3.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel3.setUser(userModel3);
        credentialModel3.setUsername("janedoe");

        UserModel userModel4 = new UserModel();
        userModel4.setAddress(addressModel2);
        userModel4.setCreated(LocalDate.ofEpochDay(1L));
        userModel4.setCredential(credentialModel3);
        userModel4.setDeleted(true);
        userModel4.setDob(LocalDate.ofEpochDay(1L));
        userModel4.setEmail("jane.doe@example.org");
        userModel4.setFname("Fname");
        userModel4.setId(123L);
        userModel4.setImageURL("https://example.org/example");
        userModel4.setLname("Lname");
        userModel4.setPassword("iloveyou");
        userModel4.setPhone("4105551212");
        userModel4.setReservationModelBarber(new HashSet<>());
        userModel4.setReservationModelClient(new HashSet<>());
        userModel4.setRole("Role");
        userModel4.setUpdated(LocalDate.ofEpochDay(1L));
        when(this.userRepository.save(any())).thenReturn(userModel4);
        when(this.userRepository.findById(any())).thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");

        UserDTO userDTO = new UserDTO();
        userDTO.setAddress(addressDTO);
        userDTO.setCreated(LocalDate.ofEpochDay(1L));
        userDTO.setDeleted(true);
        userDTO.setDob(LocalDate.ofEpochDay(1L));
        userDTO.setEmail("jane.doe@example.org");
        userDTO.setFname("Fname");
        userDTO.setId(123L);
        userDTO.setImageURL("https://example.org/example");
        userDTO.setLname("Lname");
        userDTO.setPhone("4105551212");
        userDTO.setRole("Role");
        userDTO.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserDTO> actualUpdateUserResult = this.userServiceImpl.updateUser(123L, userDTO);
        assertTrue(actualUpdateUserResult.isPresent());
        UserDTO getResult = actualUpdateUserResult.get();
        AddressDTO address = getResult.getAddress();
        assertEquals(addressDTO, address);
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        assertEquals("Street", address.getStreet());
        assertEquals(123L, address.getId().longValue());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).save(any());
        verify(this.userRepository).findById(any());
    }

    @Test
    void testUpdateUser2() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.save(any())).thenThrow(new UsernameNotFoundException("Msg"));
        when(this.userRepository.findById(any())).thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");

        UserDTO userDTO = new UserDTO();
        userDTO.setAddress(addressDTO);
        userDTO.setCreated(LocalDate.ofEpochDay(1L));
        userDTO.setDeleted(true);
        userDTO.setDob(LocalDate.ofEpochDay(1L));
        userDTO.setEmail("jane.doe@example.org");
        userDTO.setFname("Fname");
        userDTO.setId(123L);
        userDTO.setImageURL("https://example.org/example");
        userDTO.setLname("Lname");
        userDTO.setPhone("4105551212");
        userDTO.setRole("Role");
        userDTO.setUpdated(LocalDate.ofEpochDay(1L));
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.updateUser(123L, userDTO));
        verify(this.userRepository).save(any());
        verify(this.userRepository).findById(any());
    }

    @Test
    void testUpdateUser3() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");

        AddressModel addressModel3 = new AddressModel();
        addressModel3.setApartement("Apartement");
        addressModel3.setCity("Oxford");
        addressModel3.setId(123L);
        addressModel3.setState("MD");
        addressModel3.setStreet("Street");
        addressModel3.setUsers(new HashSet<>());
        addressModel3.setZip("21654");

        UserModel userModel2 = new UserModel();
        userModel2.setAddress(new AddressModel());
        userModel2.setCreated(null);
        userModel2.setCredential(new CredentialModel());
        userModel2.setDeleted(true);
        userModel2.setDob(null);
        userModel2.setEmail("jane.doe@example.org");
        userModel2.setFname("Fname");
        userModel2.setId(123L);
        userModel2.setImageURL("https://example.org/example");
        userModel2.setLname("Lname");
        userModel2.setPassword("iloveyou");
        userModel2.setPhone("4105551212");
        userModel2.setReservationModelBarber(new HashSet<>());
        userModel2.setReservationModelClient(new HashSet<>());
        userModel2.setRole("Role");
        userModel2.setUpdated(null);

        CredentialModel credentialModel2 = new CredentialModel();
        credentialModel2.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel2.setGrantedAuthority("JaneDoe");
        credentialModel2.setId(123L);
        credentialModel2.setPassword("iloveyou");
        credentialModel2.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel2.setUser(userModel2);
        credentialModel2.setUsername("janedoe");

        UserModel userModel3 = new UserModel();
        userModel3.setAddress(addressModel3);
        userModel3.setCreated(LocalDate.ofEpochDay(1L));
        userModel3.setCredential(credentialModel2);
        userModel3.setDeleted(true);
        userModel3.setDob(LocalDate.ofEpochDay(1L));
        userModel3.setEmail("jane.doe@example.org");
        userModel3.setFname("Fname");
        userModel3.setId(123L);
        userModel3.setImageURL("https://example.org/example");
        userModel3.setLname("Lname");
        userModel3.setPassword("iloveyou");
        userModel3.setPhone("4105551212");
        userModel3.setReservationModelBarber(new HashSet<>());
        userModel3.setReservationModelClient(new HashSet<>());
        userModel3.setRole("Role");
        userModel3.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel3 = new CredentialModel();
        credentialModel3.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel3.setGrantedAuthority("JaneDoe");
        credentialModel3.setId(123L);
        credentialModel3.setPassword("iloveyou");
        credentialModel3.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel3.setUser(userModel3);
        credentialModel3.setUsername("janedoe");

        AddressModel addressModel4 = new AddressModel();
        addressModel4.setApartement("Apartement");
        addressModel4.setCity("Oxford");
        addressModel4.setId(123L);
        addressModel4.setState("MD");
        addressModel4.setStreet("Street");
        addressModel4.setUsers(new HashSet<>());
        addressModel4.setZip("21654");
        UserModel userModel4 = mock(UserModel.class);
        when(userModel4.isDeleted()).thenReturn(true);
        when(userModel4.getId()).thenReturn(123L);
        when(userModel4.getEmail()).thenReturn("jane.doe@example.org");
        when(userModel4.getFname()).thenReturn("Fname");
        when(userModel4.getImageURL()).thenReturn("https://example.org/example");
        when(userModel4.getLname()).thenReturn("Lname");
        when(userModel4.getPhone()).thenReturn("4105551212");
        when(userModel4.getRole()).thenReturn("Role");
        when(userModel4.getCreated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel4.getDob()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel4.getUpdated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel4.getAddress()).thenReturn(addressModel4);
        doNothing().when(userModel4).setAddress(any());
        doNothing().when(userModel4).setCreated(any());
        doNothing().when(userModel4).setCredential(any());
        doNothing().when(userModel4).setDeleted(anyBoolean());
        doNothing().when(userModel4).setDob(any());
        doNothing().when(userModel4).setEmail(any());
        doNothing().when(userModel4).setFname(any());
        doNothing().when(userModel4).setId(any());
        doNothing().when(userModel4).setImageURL(any());
        doNothing().when(userModel4).setLname(any());
        doNothing().when(userModel4).setPassword(any());
        doNothing().when(userModel4).setPhone(any());
        doNothing().when(userModel4).setReservationModelBarber(any());
        doNothing().when(userModel4).setReservationModelClient(any());
        doNothing().when(userModel4).setRole(any());
        doNothing().when(userModel4).setUpdated(any());
        userModel4.setAddress(addressModel2);
        userModel4.setCreated(LocalDate.ofEpochDay(1L));
        userModel4.setCredential(credentialModel3);
        userModel4.setDeleted(true);
        userModel4.setDob(LocalDate.ofEpochDay(1L));
        userModel4.setEmail("jane.doe@example.org");
        userModel4.setFname("Fname");
        userModel4.setId(123L);
        userModel4.setImageURL("https://example.org/example");
        userModel4.setLname("Lname");
        userModel4.setPassword("iloveyou");
        userModel4.setPhone("4105551212");
        userModel4.setReservationModelBarber(new HashSet<>());
        userModel4.setReservationModelClient(new HashSet<>());
        userModel4.setRole("Role");
        userModel4.setUpdated(LocalDate.ofEpochDay(1L));
        when(this.userRepository.save(any())).thenReturn(userModel4);
        when(this.userRepository.findById(any())).thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");

        UserDTO userDTO = new UserDTO();
        userDTO.setAddress(addressDTO);
        userDTO.setCreated(LocalDate.ofEpochDay(1L));
        userDTO.setDeleted(true);
        userDTO.setDob(LocalDate.ofEpochDay(1L));
        userDTO.setEmail("jane.doe@example.org");
        userDTO.setFname("Fname");
        userDTO.setId(123L);
        userDTO.setImageURL("https://example.org/example");
        userDTO.setLname("Lname");
        userDTO.setPhone("4105551212");
        userDTO.setRole("Role");
        userDTO.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserDTO> actualUpdateUserResult = this.userServiceImpl.updateUser(123L, userDTO);
        assertTrue(actualUpdateUserResult.isPresent());
        UserDTO getResult = actualUpdateUserResult.get();
        AddressDTO address = getResult.getAddress();
        assertEquals(addressDTO, address);
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        assertEquals("Street", address.getStreet());
        assertEquals(123L, address.getId().longValue());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).save(any());
        verify(this.userRepository).findById(any());
        verify(userModel4).isDeleted();
        verify(userModel4).getAddress();
        verify(userModel4).getId();
        verify(userModel4).getEmail();
        verify(userModel4).getFname();
        verify(userModel4).getImageURL();
        verify(userModel4).getLname();
        verify(userModel4).getPhone();
        verify(userModel4).getRole();
        verify(userModel4).getCreated();
        verify(userModel4).getDob();
        verify(userModel4).getUpdated();
        verify(userModel4).setAddress(any());
        verify(userModel4).setCreated(any());
        verify(userModel4).setCredential(any());
        verify(userModel4).setDeleted(anyBoolean());
        verify(userModel4).setDob(any());
        verify(userModel4).setEmail(any());
        verify(userModel4).setFname(any());
        verify(userModel4).setId(any());
        verify(userModel4).setImageURL(any());
        verify(userModel4).setLname(any());
        verify(userModel4).setPassword(any());
        verify(userModel4).setPhone(any());
        verify(userModel4).setReservationModelBarber(any());
        verify(userModel4).setReservationModelClient(any());
        verify(userModel4).setRole(any());
        verify(userModel4).setUpdated(any());
    }

    @Test
    void testUpdateUser4() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");

        AddressModel addressModel3 = new AddressModel();
        addressModel3.setApartement("Apartement");
        addressModel3.setCity("Oxford");
        addressModel3.setId(123L);
        addressModel3.setState("MD");
        addressModel3.setStreet("Street");
        addressModel3.setUsers(new HashSet<>());
        addressModel3.setZip("21654");

        UserModel userModel2 = new UserModel();
        userModel2.setAddress(new AddressModel());
        userModel2.setCreated(null);
        userModel2.setCredential(new CredentialModel());
        userModel2.setDeleted(true);
        userModel2.setDob(null);
        userModel2.setEmail("jane.doe@example.org");
        userModel2.setFname("Fname");
        userModel2.setId(123L);
        userModel2.setImageURL("https://example.org/example");
        userModel2.setLname("Lname");
        userModel2.setPassword("iloveyou");
        userModel2.setPhone("4105551212");
        userModel2.setReservationModelBarber(new HashSet<>());
        userModel2.setReservationModelClient(new HashSet<>());
        userModel2.setRole("Role");
        userModel2.setUpdated(null);

        CredentialModel credentialModel2 = new CredentialModel();
        credentialModel2.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel2.setGrantedAuthority("JaneDoe");
        credentialModel2.setId(123L);
        credentialModel2.setPassword("iloveyou");
        credentialModel2.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel2.setUser(userModel2);
        credentialModel2.setUsername("janedoe");

        UserModel userModel3 = new UserModel();
        userModel3.setAddress(addressModel3);
        userModel3.setCreated(LocalDate.ofEpochDay(1L));
        userModel3.setCredential(credentialModel2);
        userModel3.setDeleted(true);
        userModel3.setDob(LocalDate.ofEpochDay(1L));
        userModel3.setEmail("jane.doe@example.org");
        userModel3.setFname("Fname");
        userModel3.setId(123L);
        userModel3.setImageURL("https://example.org/example");
        userModel3.setLname("Lname");
        userModel3.setPassword("iloveyou");
        userModel3.setPhone("4105551212");
        userModel3.setReservationModelBarber(new HashSet<>());
        userModel3.setReservationModelClient(new HashSet<>());
        userModel3.setRole("Role");
        userModel3.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel3 = new CredentialModel();
        credentialModel3.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel3.setGrantedAuthority("JaneDoe");
        credentialModel3.setId(123L);
        credentialModel3.setPassword("iloveyou");
        credentialModel3.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel3.setUser(userModel3);
        credentialModel3.setUsername("janedoe");

        AddressModel addressModel4 = new AddressModel();
        addressModel4.setApartement("Apartement");
        addressModel4.setCity("Oxford");
        addressModel4.setId(123L);
        addressModel4.setState("MD");
        addressModel4.setStreet("Street");
        addressModel4.setUsers(new HashSet<>());
        addressModel4.setZip("21654");
        UserModel userModel4 = mock(UserModel.class);
        when(userModel4.isDeleted()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getId()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getEmail()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getFname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getImageURL()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getLname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getPhone()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getRole()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getCreated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getDob()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getUpdated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel4.getAddress()).thenReturn(addressModel4);
        doNothing().when(userModel4).setAddress(any());
        doNothing().when(userModel4).setCreated(any());
        doNothing().when(userModel4).setCredential(any());
        doNothing().when(userModel4).setDeleted(anyBoolean());
        doNothing().when(userModel4).setDob(any());
        doNothing().when(userModel4).setEmail(any());
        doNothing().when(userModel4).setFname(any());
        doNothing().when(userModel4).setId(any());
        doNothing().when(userModel4).setImageURL(any());
        doNothing().when(userModel4).setLname(any());
        doNothing().when(userModel4).setPassword(any());
        doNothing().when(userModel4).setPhone(any());
        doNothing().when(userModel4).setReservationModelBarber(any());
        doNothing().when(userModel4).setReservationModelClient(any());
        doNothing().when(userModel4).setRole(any());
        doNothing().when(userModel4).setUpdated(any());
        userModel4.setAddress(addressModel2);
        userModel4.setCreated(LocalDate.ofEpochDay(1L));
        userModel4.setCredential(credentialModel3);
        userModel4.setDeleted(true);
        userModel4.setDob(LocalDate.ofEpochDay(1L));
        userModel4.setEmail("jane.doe@example.org");
        userModel4.setFname("Fname");
        userModel4.setId(123L);
        userModel4.setImageURL("https://example.org/example");
        userModel4.setLname("Lname");
        userModel4.setPassword("iloveyou");
        userModel4.setPhone("4105551212");
        userModel4.setReservationModelBarber(new HashSet<>());
        userModel4.setReservationModelClient(new HashSet<>());
        userModel4.setRole("Role");
        userModel4.setUpdated(LocalDate.ofEpochDay(1L));
        when(this.userRepository.save(any())).thenReturn(userModel4);
        when(this.userRepository.findById(any())).thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");

        UserDTO userDTO = new UserDTO();
        userDTO.setAddress(addressDTO);
        userDTO.setCreated(LocalDate.ofEpochDay(1L));
        userDTO.setDeleted(true);
        userDTO.setDob(LocalDate.ofEpochDay(1L));
        userDTO.setEmail("jane.doe@example.org");
        userDTO.setFname("Fname");
        userDTO.setId(123L);
        userDTO.setImageURL("https://example.org/example");
        userDTO.setLname("Lname");
        userDTO.setPhone("4105551212");
        userDTO.setRole("Role");
        userDTO.setUpdated(LocalDate.ofEpochDay(1L));
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.updateUser(123L, userDTO));
        verify(this.userRepository).save(any());
        verify(this.userRepository).findById(any());
        verify(userModel4).getAddress();
        verify(userModel4).getId();
        verify(userModel4).setAddress(any());
        verify(userModel4).setCreated(any());
        verify(userModel4).setCredential(any());
        verify(userModel4).setDeleted(anyBoolean());
        verify(userModel4).setDob(any());
        verify(userModel4).setEmail(any());
        verify(userModel4).setFname(any());
        verify(userModel4).setId(any());
        verify(userModel4).setImageURL(any());
        verify(userModel4).setLname(any());
        verify(userModel4).setPassword(any());
        verify(userModel4).setPhone(any());
        verify(userModel4).setReservationModelBarber(any());
        verify(userModel4).setReservationModelClient(any());
        verify(userModel4).setRole(any());
        verify(userModel4).setUpdated(any());
    }

    @Test
    void testFindUserByEmail() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findUserModelByEmail(any())).thenReturn(ofResult);
        Optional<UserDTO> actualFindUserByEmailResult = this.userServiceImpl.findUserByEmail("jane.doe@example.org");
        assertTrue(actualFindUserByEmailResult.isPresent());
        UserDTO getResult = actualFindUserByEmailResult.get();
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        AddressDTO address = getResult.getAddress();
        assertEquals("Street", address.getStreet());
        assertEquals(123L, address.getId().longValue());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).findUserModelByEmail(any());
    }

    @Test
    void testFindUserByEmail2() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel1 = mock(UserModel.class);
        when(userModel1.isDeleted()).thenReturn(true);
        when(userModel1.getId()).thenReturn(123L);
        when(userModel1.getEmail()).thenReturn("jane.doe@example.org");
        when(userModel1.getFname()).thenReturn("Fname");
        when(userModel1.getImageURL()).thenReturn("https://example.org/example");
        when(userModel1.getLname()).thenReturn("Lname");
        when(userModel1.getPhone()).thenReturn("4105551212");
        when(userModel1.getRole()).thenReturn("Role");
        when(userModel1.getCreated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getDob()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getUpdated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel1).setAddress(any());
        doNothing().when(userModel1).setCreated(any());
        doNothing().when(userModel1).setCredential(any());
        doNothing().when(userModel1).setDeleted(anyBoolean());
        doNothing().when(userModel1).setDob(any());
        doNothing().when(userModel1).setEmail(any());
        doNothing().when(userModel1).setFname(any());
        doNothing().when(userModel1).setId(any());
        doNothing().when(userModel1).setImageURL(any());
        doNothing().when(userModel1).setLname(any());
        doNothing().when(userModel1).setPassword(any());
        doNothing().when(userModel1).setPhone(any());
        doNothing().when(userModel1).setReservationModelBarber(any());
        doNothing().when(userModel1).setReservationModelClient(any());
        doNothing().when(userModel1).setRole(any());
        doNothing().when(userModel1).setUpdated(any());
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findUserModelByEmail(any())).thenReturn(ofResult);
        Optional<UserDTO> actualFindUserByEmailResult = this.userServiceImpl.findUserByEmail("jane.doe@example.org");
        assertTrue(actualFindUserByEmailResult.isPresent());
        UserDTO getResult = actualFindUserByEmailResult.get();
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        AddressDTO address = getResult.getAddress();
        assertEquals("Street", address.getStreet());
        assertEquals(123L, address.getId().longValue());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).findUserModelByEmail(any());
        verify(userModel1).isDeleted();
        verify(userModel1).getAddress();
        verify(userModel1).getId();
        verify(userModel1).getEmail();
        verify(userModel1).getFname();
        verify(userModel1).getImageURL();
        verify(userModel1).getLname();
        verify(userModel1).getPhone();
        verify(userModel1).getRole();
        verify(userModel1).getCreated();
        verify(userModel1).getDob();
        verify(userModel1).getUpdated();
        verify(userModel1).setAddress(any());
        verify(userModel1).setCreated(any());
        verify(userModel1).setCredential(any());
        verify(userModel1).setDeleted(anyBoolean());
        verify(userModel1).setDob(any());
        verify(userModel1).setEmail(any());
        verify(userModel1).setFname(any());
        verify(userModel1).setId(any());
        verify(userModel1).setImageURL(any());
        verify(userModel1).setLname(any());
        verify(userModel1).setPassword(any());
        verify(userModel1).setPhone(any());
        verify(userModel1).setReservationModelBarber(any());
        verify(userModel1).setReservationModelClient(any());
        verify(userModel1).setRole(any());
        verify(userModel1).setUpdated(any());
    }

    @Test
    void testFindUserByEmail3() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel1 = mock(UserModel.class);
        when(userModel1.isDeleted()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getId()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getEmail()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getFname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getImageURL()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getLname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getPhone()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getRole()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getCreated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getDob()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getUpdated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel1).setAddress(any());
        doNothing().when(userModel1).setCreated(any());
        doNothing().when(userModel1).setCredential(any());
        doNothing().when(userModel1).setDeleted(anyBoolean());
        doNothing().when(userModel1).setDob(any());
        doNothing().when(userModel1).setEmail(any());
        doNothing().when(userModel1).setFname(any());
        doNothing().when(userModel1).setId(any());
        doNothing().when(userModel1).setImageURL(any());
        doNothing().when(userModel1).setLname(any());
        doNothing().when(userModel1).setPassword(any());
        doNothing().when(userModel1).setPhone(any());
        doNothing().when(userModel1).setReservationModelBarber(any());
        doNothing().when(userModel1).setReservationModelClient(any());
        doNothing().when(userModel1).setRole(any());
        doNothing().when(userModel1).setUpdated(any());
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findUserModelByEmail(any())).thenReturn(ofResult);
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.findUserByEmail("jane.doe@example.org"));
        verify(this.userRepository).findUserModelByEmail(any());
        verify(userModel1).getAddress();
        verify(userModel1).getId();
        verify(userModel1).setAddress(any());
        verify(userModel1).setCreated(any());
        verify(userModel1).setCredential(any());
        verify(userModel1).setDeleted(anyBoolean());
        verify(userModel1).setDob(any());
        verify(userModel1).setEmail(any());
        verify(userModel1).setFname(any());
        verify(userModel1).setId(any());
        verify(userModel1).setImageURL(any());
        verify(userModel1).setLname(any());
        verify(userModel1).setPassword(any());
        verify(userModel1).setPhone(any());
        verify(userModel1).setReservationModelBarber(any());
        verify(userModel1).setReservationModelClient(any());
        verify(userModel1).setRole(any());
        verify(userModel1).setUpdated(any());
    }

    @Test
    void testFindAllUsers() {
        when(this.userRepository.findAll()).thenReturn(new ArrayList<>());
        assertTrue(this.userServiceImpl.findAllUsers().isEmpty());
        verify(this.userRepository).findAll();
    }

    @Test
    void testFindAllUsers2() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));

        ArrayList<UserModel> userModelList = new ArrayList<>();
        userModelList.add(userModel1);
        when(this.userRepository.findAll()).thenReturn(userModelList);
        assertEquals(1, this.userServiceImpl.findAllUsers().size());
        verify(this.userRepository).findAll();
    }

    @Test
    void testFindAllUsers3() {
        when(this.userRepository.findAll()).thenThrow(new UsernameNotFoundException("Msg"));
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.findAllUsers());
        verify(this.userRepository).findAll();
    }

    @Test
    void testFindAllUsers4() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");

        AddressModel addressModel3 = new AddressModel();
        addressModel3.setApartement("Apartement");
        addressModel3.setCity("Oxford");
        addressModel3.setId(123L);
        addressModel3.setState("MD");
        addressModel3.setStreet("Street");
        addressModel3.setUsers(new HashSet<>());
        addressModel3.setZip("21654");

        CredentialModel credentialModel2 = new CredentialModel();
        credentialModel2.setCreated(null);
        credentialModel2.setGrantedAuthority("JaneDoe");
        credentialModel2.setId(123L);
        credentialModel2.setPassword("iloveyou");
        credentialModel2.setUpdated(null);
        credentialModel2.setUser(new UserModel());
        credentialModel2.setUsername("janedoe");

        UserModel userModel2 = new UserModel();
        userModel2.setAddress(addressModel3);
        userModel2.setCreated(LocalDate.ofEpochDay(3L));
        userModel2.setCredential(credentialModel2);
        userModel2.setDeleted(true);
        userModel2.setDob(LocalDate.ofEpochDay(3L));
        userModel2.setEmail("jane.doe@example.org");
        userModel2.setFname("Fname");
        userModel2.setId(123L);
        userModel2.setImageURL("https://example.org/example");
        userModel2.setLname("Lname");
        userModel2.setPassword("iloveyou");
        userModel2.setPhone("4105551212");
        userModel2.setReservationModelBarber(new HashSet<>());
        userModel2.setReservationModelClient(new HashSet<>());
        userModel2.setRole("Role");
        userModel2.setUpdated(LocalDate.ofEpochDay(3L));

        CredentialModel credentialModel3 = new CredentialModel();
        credentialModel3.setCreated(LocalDate.ofEpochDay(3L));
        credentialModel3.setGrantedAuthority("JaneDoe");
        credentialModel3.setId(123L);
        credentialModel3.setPassword("iloveyou");
        credentialModel3.setUpdated(LocalDate.ofEpochDay(3L));
        credentialModel3.setUser(userModel2);
        credentialModel3.setUsername("janedoe");

        UserModel userModel3 = new UserModel();
        userModel3.setAddress(addressModel2);
        userModel3.setCreated(LocalDate.ofEpochDay(3L));
        userModel3.setCredential(credentialModel3);
        userModel3.setDeleted(true);
        userModel3.setDob(LocalDate.ofEpochDay(3L));
        userModel3.setEmail("jane.doe@example.org");
        userModel3.setFname("Fname");
        userModel3.setId(123L);
        userModel3.setImageURL("https://example.org/example");
        userModel3.setLname("Lname");
        userModel3.setPassword("iloveyou");
        userModel3.setPhone("4105551212");
        userModel3.setReservationModelBarber(new HashSet<>());
        userModel3.setReservationModelClient(new HashSet<>());
        userModel3.setRole("Role");
        userModel3.setUpdated(LocalDate.ofEpochDay(3L));

        ArrayList<UserModel> userModelList = new ArrayList<>();
        userModelList.add(userModel3);
        userModelList.add(userModel1);
        when(this.userRepository.findAll()).thenReturn(userModelList);
        assertEquals(2, this.userServiceImpl.findAllUsers().size());
        verify(this.userRepository).findAll();
    }

    @Test
    void testFindAllUsers5() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel1 = mock(UserModel.class);
        when(userModel1.isDeleted()).thenReturn(true);
        when(userModel1.getId()).thenReturn(123L);
        when(userModel1.getEmail()).thenReturn("jane.doe@example.org");
        when(userModel1.getFname()).thenReturn("Fname");
        when(userModel1.getImageURL()).thenReturn("https://example.org/example");
        when(userModel1.getLname()).thenReturn("Lname");
        when(userModel1.getPhone()).thenReturn("4105551212");
        when(userModel1.getRole()).thenReturn("Role");
        when(userModel1.getCreated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getDob()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getUpdated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel1).setAddress(any());
        doNothing().when(userModel1).setCreated(any());
        doNothing().when(userModel1).setCredential(any());
        doNothing().when(userModel1).setDeleted(anyBoolean());
        doNothing().when(userModel1).setDob(any());
        doNothing().when(userModel1).setEmail(any());
        doNothing().when(userModel1).setFname(any());
        doNothing().when(userModel1).setId(any());
        doNothing().when(userModel1).setImageURL(any());
        doNothing().when(userModel1).setLname(any());
        doNothing().when(userModel1).setPassword(any());
        doNothing().when(userModel1).setPhone(any());
        doNothing().when(userModel1).setReservationModelBarber(any());
        doNothing().when(userModel1).setReservationModelClient(any());
        doNothing().when(userModel1).setRole(any());
        doNothing().when(userModel1).setUpdated(any());
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));

        ArrayList<UserModel> userModelList = new ArrayList<>();
        userModelList.add(userModel1);
        when(this.userRepository.findAll()).thenReturn(userModelList);
        assertEquals(1, this.userServiceImpl.findAllUsers().size());
        verify(this.userRepository).findAll();
        verify(userModel1).isDeleted();
        verify(userModel1).getAddress();
        verify(userModel1).getId();
        verify(userModel1).getEmail();
        verify(userModel1).getFname();
        verify(userModel1).getImageURL();
        verify(userModel1).getLname();
        verify(userModel1).getPhone();
        verify(userModel1).getRole();
        verify(userModel1).getCreated();
        verify(userModel1).getDob();
        verify(userModel1).getUpdated();
        verify(userModel1).setAddress(any());
        verify(userModel1).setCreated(any());
        verify(userModel1).setCredential(any());
        verify(userModel1).setDeleted(anyBoolean());
        verify(userModel1).setDob(any());
        verify(userModel1).setEmail(any());
        verify(userModel1).setFname(any());
        verify(userModel1).setId(any());
        verify(userModel1).setImageURL(any());
        verify(userModel1).setLname(any());
        verify(userModel1).setPassword(any());
        verify(userModel1).setPhone(any());
        verify(userModel1).setReservationModelBarber(any());
        verify(userModel1).setReservationModelClient(any());
        verify(userModel1).setRole(any());
        verify(userModel1).setUpdated(any());
    }

    @Test
    void testFindAllUsers6() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel1 = mock(UserModel.class);
        when(userModel1.isDeleted()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getId()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getEmail()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getFname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getImageURL()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getLname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getPhone()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getRole()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getCreated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getDob()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getUpdated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel1).setAddress(any());
        doNothing().when(userModel1).setCreated(any());
        doNothing().when(userModel1).setCredential(any());
        doNothing().when(userModel1).setDeleted(anyBoolean());
        doNothing().when(userModel1).setDob(any());
        doNothing().when(userModel1).setEmail(any());
        doNothing().when(userModel1).setFname(any());
        doNothing().when(userModel1).setId(any());
        doNothing().when(userModel1).setImageURL(any());
        doNothing().when(userModel1).setLname(any());
        doNothing().when(userModel1).setPassword(any());
        doNothing().when(userModel1).setPhone(any());
        doNothing().when(userModel1).setReservationModelBarber(any());
        doNothing().when(userModel1).setReservationModelClient(any());
        doNothing().when(userModel1).setRole(any());
        doNothing().when(userModel1).setUpdated(any());
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));

        ArrayList<UserModel> userModelList = new ArrayList<>();
        userModelList.add(userModel1);
        when(this.userRepository.findAll()).thenReturn(userModelList);
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.findAllUsers());
        verify(this.userRepository).findAll();
        verify(userModel1).getAddress();
        verify(userModel1).getId();
        verify(userModel1).setAddress(any());
        verify(userModel1).setCreated(any());
        verify(userModel1).setCredential(any());
        verify(userModel1).setDeleted(anyBoolean());
        verify(userModel1).setDob(any());
        verify(userModel1).setEmail(any());
        verify(userModel1).setFname(any());
        verify(userModel1).setId(any());
        verify(userModel1).setImageURL(any());
        verify(userModel1).setLname(any());
        verify(userModel1).setPassword(any());
        verify(userModel1).setPhone(any());
        verify(userModel1).setReservationModelBarber(any());
        verify(userModel1).setReservationModelClient(any());
        verify(userModel1).setRole(any());
        verify(userModel1).setUpdated(any());
    }

    @Test
    void testSaveUser() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        UserModel userModel = new UserModel();
        userModel.setAddress(new AddressModel());
        userModel.setCreated(null);
        userModel.setCredential(new CredentialModel());
        userModel.setDeleted(true);
        userModel.setDob(null);
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(null);

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel.setUser(userModel);
        credentialModel.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel1);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel1);
        credentialModel1.setUsername("janedoe");

        UserModel userModel2 = new UserModel();
        userModel2.setAddress(addressModel);
        userModel2.setCreated(LocalDate.ofEpochDay(1L));
        userModel2.setCredential(credentialModel1);
        userModel2.setDeleted(true);
        userModel2.setDob(LocalDate.ofEpochDay(1L));
        userModel2.setEmail("jane.doe@example.org");
        userModel2.setFname("Fname");
        userModel2.setId(123L);
        userModel2.setImageURL("https://example.org/example");
        userModel2.setLname("Lname");
        userModel2.setPassword("iloveyou");
        userModel2.setPhone("4105551212");
        userModel2.setReservationModelBarber(new HashSet<>());
        userModel2.setReservationModelClient(new HashSet<>());
        userModel2.setRole("Role");
        userModel2.setUpdated(LocalDate.ofEpochDay(1L));
        when(this.userRepository.save(any())).thenReturn(userModel2);
        when(this.passwordEncoder.encode(any())).thenReturn("secret");

        CredentialDTO credentialDTO = new CredentialDTO();
        credentialDTO.setCreated(LocalDate.ofEpochDay(1L));
        credentialDTO.setGrantedAuthority("JaneDoe");
        credentialDTO.setId(123L);
        credentialDTO.setPassword("iloveyou");
        credentialDTO.setUpdated(LocalDate.ofEpochDay(1L));
        credentialDTO.setUsername("janedoe");
        Optional<CredentialDTO> ofResult = Optional.of(credentialDTO);
        when(this.credentialService.saveCredential(any())).thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");
        Optional<AddressDTO> ofResult1 = Optional.of(addressDTO);
        when(this.addressService.saveAddressModel(any())).thenReturn(ofResult1);

        AddressDTO addressDTO1 = new AddressDTO();

        SignupDTO signupDTO = new SignupDTO();
        signupDTO.setDob(LocalDate.ofEpochDay(1L));
        signupDTO.setEmail("jane.doe@example.org");
        signupDTO.setFname("Fname");
//        signupDTO.setId(123L);
        signupDTO.setImageURL("https://example.org/example");
        signupDTO.setLname("Lname");
        signupDTO.setPassword("iloveyou");
        signupDTO.setPhone("4105551212");
        signupDTO.setRole("Role");
        signupDTO.setApartment("Apartement");
        signupDTO.setCity("Oxford");
//        signupDTO.setId(123L);
        signupDTO.setState("MD");
        signupDTO.setStreet("Street");
        signupDTO.setZip("21654");
        Optional<UserDTO> actualSaveUserResult = this.userServiceImpl.saveUser(signupDTO);
        assertTrue(actualSaveUserResult.isPresent());
        UserDTO getResult = actualSaveUserResult.get();
        AddressDTO address = getResult.getAddress();
        assertEquals(addressDTO, address);
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        assertEquals("Street", address.getStreet());
        assertNotNull(address.getId());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).save(any());
        verify(this.passwordEncoder, atLeast(1)).encode(any());
        verify(this.credentialService).saveCredential(any());
        verify(this.addressService).saveAddressModel(any());
        String apartment = signupDTO.getApartment();
        String zip = signupDTO.getZip();
        assertEquals(address.getApartement(), apartment);
        assertNotNull(apartment);
        assertNotNull(zip);
    }

    @Test
    void testSaveUser2() {
        when(this.userRepository.save(any())).thenThrow(new UsernameNotFoundException("Msg"));
        when(this.passwordEncoder.encode(any())).thenReturn("secret");

        CredentialDTO credentialDTO = new CredentialDTO();
        credentialDTO.setCreated(LocalDate.ofEpochDay(1L));
        credentialDTO.setGrantedAuthority("JaneDoe");
        credentialDTO.setId(123L);
        credentialDTO.setPassword("iloveyou");
        credentialDTO.setUpdated(LocalDate.ofEpochDay(1L));
        credentialDTO.setUsername("janedoe");
        Optional<CredentialDTO> ofResult = Optional.of(credentialDTO);
        when(this.credentialService.saveCredential(any()))
                .thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");
        Optional<AddressDTO> ofResult1 = Optional.of(addressDTO);
        when(this.addressService.saveAddressModel(any()))
                .thenReturn(ofResult1);

        AddressDTO addressDTO1 = new AddressDTO();

        SignupDTO signupDTO = new SignupDTO();
        signupDTO.setDob(LocalDate.ofEpochDay(1L));
        signupDTO.setEmail("jane.doe@example.org");
        signupDTO.setFname("Fname");
        signupDTO.setImageURL("https://example.org/example");
        signupDTO.setLname("Lname");
        signupDTO.setPassword("iloveyou");
        signupDTO.setPhone("4105551212");
        signupDTO.setRole("Role");
        signupDTO.setApartment("Apartement");
        signupDTO.setCity("Oxford");
        signupDTO.setState("MD");
        signupDTO.setStreet("Street");
        signupDTO.setZip("21654");
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.saveUser(signupDTO));
        verify(this.userRepository).save(any());
        verify(this.passwordEncoder, atLeast(1)).encode(any());
        verify(this.credentialService).saveCredential(any());
        verify(this.addressService).saveAddressModel(any());
    }

    @Test
    void testSaveUser3() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        UserModel userModel = new UserModel();
        userModel.setAddress(new AddressModel());
        userModel.setCreated(null);
        userModel.setCredential(new CredentialModel());
        userModel.setDeleted(true);
        userModel.setDob(null);
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(null);

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel.setUser(userModel);
        credentialModel.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel1);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel1);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel2 = mock(UserModel.class);
        when(userModel2.isDeleted()).thenReturn(true);
        when(userModel2.getId()).thenReturn(123L);
        when(userModel2.getEmail()).thenReturn("jane.doe@example.org");
        when(userModel2.getFname()).thenReturn("Fname");
        when(userModel2.getImageURL()).thenReturn("https://example.org/example");
        when(userModel2.getLname()).thenReturn("Lname");
        when(userModel2.getPhone()).thenReturn("4105551212");
        when(userModel2.getRole()).thenReturn("Role");
        when(userModel2.getCreated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel2.getDob()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel2.getUpdated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel2.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel2).setAddress(any());
        doNothing().when(userModel2).setCreated(any());
        doNothing().when(userModel2).setCredential(any());
        doNothing().when(userModel2).setDeleted(anyBoolean());
        doNothing().when(userModel2).setDob(any());
        doNothing().when(userModel2).setEmail(any());
        doNothing().when(userModel2).setFname(any());
        doNothing().when(userModel2).setId(any());
        doNothing().when(userModel2).setImageURL(any());
        doNothing().when(userModel2).setLname(any());
        doNothing().when(userModel2).setPassword(any());
        doNothing().when(userModel2).setPhone(any());
        doNothing().when(userModel2).setReservationModelBarber(any());
        doNothing().when(userModel2).setReservationModelClient(any());
        doNothing().when(userModel2).setRole(any());
        doNothing().when(userModel2).setUpdated(any());
        userModel2.setAddress(addressModel);
        userModel2.setCreated(LocalDate.ofEpochDay(1L));
        userModel2.setCredential(credentialModel1);
        userModel2.setDeleted(true);
        userModel2.setDob(LocalDate.ofEpochDay(1L));
        userModel2.setEmail("jane.doe@example.org");
        userModel2.setFname("Fname");
        userModel2.setId(123L);
        userModel2.setImageURL("https://example.org/example");
        userModel2.setLname("Lname");
        userModel2.setPassword("iloveyou");
        userModel2.setPhone("4105551212");
        userModel2.setReservationModelBarber(new HashSet<>());
        userModel2.setReservationModelClient(new HashSet<>());
        userModel2.setRole("Role");
        userModel2.setUpdated(LocalDate.ofEpochDay(1L));
        when(this.userRepository.save(any())).thenReturn(userModel2);
        when(this.passwordEncoder.encode(any())).thenReturn("secret");

        CredentialDTO credentialDTO = new CredentialDTO();
        credentialDTO.setCreated(LocalDate.ofEpochDay(1L));
        credentialDTO.setGrantedAuthority("JaneDoe");
        credentialDTO.setId(123L);
        credentialDTO.setPassword("iloveyou");
        credentialDTO.setUpdated(LocalDate.ofEpochDay(1L));
        credentialDTO.setUsername("janedoe");
        Optional<CredentialDTO> ofResult = Optional.of(credentialDTO);
        when(this.credentialService.saveCredential(any())).thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");
        Optional<AddressDTO> ofResult1 = Optional.of(addressDTO);
        when(this.addressService.saveAddressModel(any())).thenReturn(ofResult1);

        SignupDTO signupDTO = new SignupDTO();
        signupDTO.setDob(LocalDate.ofEpochDay(1L));
        signupDTO.setEmail("jane.doe@example.org");
        signupDTO.setFname("Fname");
        signupDTO.setImageURL("https://example.org/example");
        signupDTO.setLname("Lname");
        signupDTO.setPassword("iloveyou");
        signupDTO.setPhone("4105551212");
        signupDTO.setRole("Role");
        signupDTO.setApartment("Apartement");
        signupDTO.setCity("Oxford");
        signupDTO.setState("MD");
        signupDTO.setStreet("Street");
        signupDTO.setZip("21654");
        Optional<UserDTO> actualSaveUserResult = this.userServiceImpl.saveUser(signupDTO);
        assertTrue(actualSaveUserResult.isPresent());
        UserDTO getResult = actualSaveUserResult.get();
        AddressDTO address = getResult.getAddress();
        assertEquals(addressDTO, address);
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        assertEquals("Street", address.getStreet());
        assertNotNull(address.getId());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).save(any());
        verify(userModel2).isDeleted();
        verify(userModel2).getAddress();
        verify(userModel2).getId();
        verify(userModel2).getEmail();
        verify(userModel2).getFname();
        verify(userModel2).getImageURL();
        verify(userModel2).getLname();
        verify(userModel2).getPhone();
        verify(userModel2).getRole();
        verify(userModel2).getCreated();
        verify(userModel2).getDob();
        verify(userModel2).getUpdated();
        verify(userModel2).setAddress(any());
        verify(userModel2).setCreated(any());
        verify(userModel2).setCredential(any());
        verify(userModel2).setDeleted(anyBoolean());
        verify(userModel2).setDob(any());
        verify(userModel2).setEmail(any());
        verify(userModel2).setFname(any());
        verify(userModel2).setId(any());
        verify(userModel2).setImageURL(any());
        verify(userModel2).setLname(any());
        verify(userModel2).setPassword(any());
        verify(userModel2).setPhone(any());
        verify(userModel2).setReservationModelBarber(any());
        verify(userModel2).setReservationModelClient(any());
        verify(userModel2).setRole(any());
        verify(userModel2).setUpdated(any());
        verify(this.passwordEncoder, atLeast(1)).encode(any());
        verify(this.credentialService).saveCredential(any());
        verify(this.addressService).saveAddressModel(any());
        String zip = signupDTO.getZip();
        assertEquals(address.getZip(), zip);
        assertNotNull(zip);
    }

    @Test
    void testSaveUser4() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        UserModel userModel = new UserModel();
        userModel.setAddress(new AddressModel());
        userModel.setCreated(null);
        userModel.setCredential(new CredentialModel());
        userModel.setDeleted(true);
        userModel.setDob(null);
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(null);

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel.setUser(userModel);
        credentialModel.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel1);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel1);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel2 = mock(UserModel.class);
        when(userModel2.isDeleted()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getId()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getEmail()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getFname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getImageURL()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getLname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getPhone()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getRole()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getCreated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getDob()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getUpdated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel2.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel2).setAddress(any());
        doNothing().when(userModel2).setCreated(any());
        doNothing().when(userModel2).setCredential(any());
        doNothing().when(userModel2).setDeleted(anyBoolean());
        doNothing().when(userModel2).setDob(any());
        doNothing().when(userModel2).setEmail(any());
        doNothing().when(userModel2).setFname(any());
        doNothing().when(userModel2).setId(any());
        doNothing().when(userModel2).setImageURL(any());
        doNothing().when(userModel2).setLname(any());
        doNothing().when(userModel2).setPassword(any());
        doNothing().when(userModel2).setPhone(any());
        doNothing().when(userModel2).setReservationModelBarber(any());
        doNothing().when(userModel2).setReservationModelClient(any());
        doNothing().when(userModel2).setRole(any());
        doNothing().when(userModel2).setUpdated(any());
        userModel2.setAddress(addressModel);
        userModel2.setCreated(LocalDate.ofEpochDay(1L));
        userModel2.setCredential(credentialModel1);
        userModel2.setDeleted(true);
        userModel2.setDob(LocalDate.ofEpochDay(1L));
        userModel2.setEmail("jane.doe@example.org");
        userModel2.setFname("Fname");
        userModel2.setId(123L);
        userModel2.setImageURL("https://example.org/example");
        userModel2.setLname("Lname");
        userModel2.setPassword("iloveyou");
        userModel2.setPhone("4105551212");
        userModel2.setReservationModelBarber(new HashSet<>());
        userModel2.setReservationModelClient(new HashSet<>());
        userModel2.setRole("Role");
        userModel2.setUpdated(LocalDate.ofEpochDay(1L));
        when(this.userRepository.save(any())).thenReturn(userModel2);
        when(this.passwordEncoder.encode(any())).thenReturn("secret");

        CredentialDTO credentialDTO = new CredentialDTO();
        credentialDTO.setCreated(LocalDate.ofEpochDay(1L));
        credentialDTO.setGrantedAuthority("JaneDoe");
        credentialDTO.setId(123L);
        credentialDTO.setPassword("iloveyou");
        credentialDTO.setUpdated(LocalDate.ofEpochDay(1L));
        credentialDTO.setUsername("janedoe");
        Optional<CredentialDTO> ofResult = Optional.of(credentialDTO);
        when(this.credentialService.saveCredential(any())).thenReturn(ofResult);

        AddressDTO addressDTO = new AddressDTO();
        addressDTO.setApartement("Apartement");
        addressDTO.setCity("Oxford");
        addressDTO.setId(123L);
        addressDTO.setState("MD");
        addressDTO.setStreet("Street");
        addressDTO.setZip("21654");
        Optional<AddressDTO> ofResult1 = Optional.of(addressDTO);
        when(this.addressService.saveAddressModel(any())).thenReturn(ofResult1);

        SignupDTO signupDTO = new SignupDTO();
        signupDTO.setDob(LocalDate.ofEpochDay(1L));
        signupDTO.setEmail("jane.doe@example.org");
        signupDTO.setFname("Fname");
        signupDTO.setImageURL("https://example.org/example");
        signupDTO.setLname("Lname");
        signupDTO.setPassword("iloveyou");
        signupDTO.setPhone("4105551212");
        signupDTO.setRole("Role");
        signupDTO.setApartment("Apartement");
        signupDTO.setCity("Oxford");
        signupDTO.setState("MD");
        signupDTO.setStreet("Street");
        signupDTO.setZip("21654");
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.saveUser(signupDTO));
        verify(this.userRepository).save(any());
        verify(userModel2).getAddress();
        verify(userModel2).getId();
        verify(userModel2).setAddress(any());
        verify(userModel2).setCreated(any());
        verify(userModel2).setCredential(any());
        verify(userModel2).setDeleted(anyBoolean());
        verify(userModel2).setDob(any());
        verify(userModel2).setEmail(any());
        verify(userModel2).setFname(any());
        verify(userModel2).setId(any());
        verify(userModel2).setImageURL(any());
        verify(userModel2).setLname(any());
        verify(userModel2).setPassword(any());
        verify(userModel2).setPhone(any());
        verify(userModel2).setReservationModelBarber(any());
        verify(userModel2).setReservationModelClient(any());
        verify(userModel2).setRole(any());
        verify(userModel2).setUpdated(any());
        verify(this.passwordEncoder, atLeast(1)).encode(any());
        verify(this.credentialService).saveCredential(any());
        verify(this.addressService).saveAddressModel(any());
    }

    @Test
    void testFindUserById() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        UserModel userModel1 = new UserModel();
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findById(any())).thenReturn(ofResult);
        Optional<UserDTO> actualFindUserByIdResult = this.userServiceImpl.findUserById(123L);
        assertTrue(actualFindUserByIdResult.isPresent());
        UserDTO getResult = actualFindUserByIdResult.get();
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        AddressDTO address = getResult.getAddress();
        assertEquals("Street", address.getStreet());
        assertEquals(123L, address.getId().longValue());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).findById(any());
    }

    @Test
    void testFindUserById2() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel1 = mock(UserModel.class);
        when(userModel1.isDeleted()).thenReturn(true);
        when(userModel1.getId()).thenReturn(123L);
        when(userModel1.getEmail()).thenReturn("jane.doe@example.org");
        when(userModel1.getFname()).thenReturn("Fname");
        when(userModel1.getImageURL()).thenReturn("https://example.org/example");
        when(userModel1.getLname()).thenReturn("Lname");
        when(userModel1.getPhone()).thenReturn("4105551212");
        when(userModel1.getRole()).thenReturn("Role");
        when(userModel1.getCreated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getDob()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getUpdated()).thenReturn(LocalDate.ofEpochDay(1L));
        when(userModel1.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel1).setAddress(any());
        doNothing().when(userModel1).setCreated(any());
        doNothing().when(userModel1).setCredential(any());
        doNothing().when(userModel1).setDeleted(anyBoolean());
        doNothing().when(userModel1).setDob(any());
        doNothing().when(userModel1).setEmail(any());
        doNothing().when(userModel1).setFname(any());
        doNothing().when(userModel1).setId(any());
        doNothing().when(userModel1).setImageURL(any());
        doNothing().when(userModel1).setLname(any());
        doNothing().when(userModel1).setPassword(any());
        doNothing().when(userModel1).setPhone(any());
        doNothing().when(userModel1).setReservationModelBarber(any());
        doNothing().when(userModel1).setReservationModelClient(any());
        doNothing().when(userModel1).setRole(any());
        doNothing().when(userModel1).setUpdated(any());
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findById(any())).thenReturn(ofResult);
        Optional<UserDTO> actualFindUserByIdResult = this.userServiceImpl.findUserById(123L);
        assertTrue(actualFindUserByIdResult.isPresent());
        UserDTO getResult = actualFindUserByIdResult.get();
        assertTrue(getResult.isDeleted());
        assertEquals("1970-01-02", getResult.getCreated().toString());
        assertEquals("jane.doe@example.org", getResult.getEmail());
        assertEquals("Lname", getResult.getLname());
        assertEquals("4105551212", getResult.getPhone());
        assertEquals("Fname", getResult.getFname());
        assertEquals("Role", getResult.getRole());
        assertEquals("1970-01-02", getResult.getUpdated().toString());
        assertEquals("1970-01-02", getResult.getDob().toString());
        assertEquals(123L, getResult.getId().longValue());
        assertEquals("https://example.org/example", getResult.getImageURL());
        AddressDTO address = getResult.getAddress();
        assertEquals("Street", address.getStreet());
        assertEquals(123L, address.getId().longValue());
        assertEquals("Apartement", address.getApartement());
        assertEquals("MD", address.getState());
        assertEquals("21654", address.getZip());
        assertEquals("Oxford", address.getCity());
        verify(this.userRepository).findById(any());
        verify(userModel1).isDeleted();
        verify(userModel1).getAddress();
        verify(userModel1).getId();
        verify(userModel1).getEmail();
        verify(userModel1).getFname();
        verify(userModel1).getImageURL();
        verify(userModel1).getLname();
        verify(userModel1).getPhone();
        verify(userModel1).getRole();
        verify(userModel1).getCreated();
        verify(userModel1).getDob();
        verify(userModel1).getUpdated();
        verify(userModel1).setAddress(any());
        verify(userModel1).setCreated(any());
        verify(userModel1).setCredential(any());
        verify(userModel1).setDeleted(anyBoolean());
        verify(userModel1).setDob(any());
        verify(userModel1).setEmail(any());
        verify(userModel1).setFname(any());
        verify(userModel1).setId(any());
        verify(userModel1).setImageURL(any());
        verify(userModel1).setLname(any());
        verify(userModel1).setPassword(any());
        verify(userModel1).setPhone(any());
        verify(userModel1).setReservationModelBarber(any());
        verify(userModel1).setReservationModelClient(any());
        verify(userModel1).setRole(any());
        verify(userModel1).setUpdated(any());
    }

    @Test
    void testFindUserById3() {
        AddressModel addressModel = new AddressModel();
        addressModel.setApartement("Apartement");
        addressModel.setCity("Oxford");
        addressModel.setId(123L);
        addressModel.setState("MD");
        addressModel.setStreet("Street");
        addressModel.setUsers(new HashSet<>());
        addressModel.setZip("21654");

        AddressModel addressModel1 = new AddressModel();
        addressModel1.setApartement("Apartement");
        addressModel1.setCity("Oxford");
        addressModel1.setId(123L);
        addressModel1.setState("MD");
        addressModel1.setStreet("Street");
        addressModel1.setUsers(new HashSet<>());
        addressModel1.setZip("21654");

        CredentialModel credentialModel = new CredentialModel();
        credentialModel.setCreated(null);
        credentialModel.setGrantedAuthority("JaneDoe");
        credentialModel.setId(123L);
        credentialModel.setPassword("iloveyou");
        credentialModel.setUpdated(null);
        credentialModel.setUser(new UserModel());
        credentialModel.setUsername("janedoe");

        UserModel userModel = new UserModel();
        userModel.setAddress(addressModel1);
        userModel.setCreated(LocalDate.ofEpochDay(1L));
        userModel.setCredential(credentialModel);
        userModel.setDeleted(true);
        userModel.setDob(LocalDate.ofEpochDay(1L));
        userModel.setEmail("jane.doe@example.org");
        userModel.setFname("Fname");
        userModel.setId(123L);
        userModel.setImageURL("https://example.org/example");
        userModel.setLname("Lname");
        userModel.setPassword("iloveyou");
        userModel.setPhone("4105551212");
        userModel.setReservationModelBarber(new HashSet<>());
        userModel.setReservationModelClient(new HashSet<>());
        userModel.setRole("Role");
        userModel.setUpdated(LocalDate.ofEpochDay(1L));

        CredentialModel credentialModel1 = new CredentialModel();
        credentialModel1.setCreated(LocalDate.ofEpochDay(1L));
        credentialModel1.setGrantedAuthority("JaneDoe");
        credentialModel1.setId(123L);
        credentialModel1.setPassword("iloveyou");
        credentialModel1.setUpdated(LocalDate.ofEpochDay(1L));
        credentialModel1.setUser(userModel);
        credentialModel1.setUsername("janedoe");

        AddressModel addressModel2 = new AddressModel();
        addressModel2.setApartement("Apartement");
        addressModel2.setCity("Oxford");
        addressModel2.setId(123L);
        addressModel2.setState("MD");
        addressModel2.setStreet("Street");
        addressModel2.setUsers(new HashSet<>());
        addressModel2.setZip("21654");
        UserModel userModel1 = mock(UserModel.class);
        when(userModel1.isDeleted()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getId()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getEmail()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getFname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getImageURL()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getLname()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getPhone()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getRole()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getCreated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getDob()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getUpdated()).thenThrow(new UsernameNotFoundException("Msg"));
        when(userModel1.getAddress()).thenReturn(addressModel2);
        doNothing().when(userModel1).setAddress(any());
        doNothing().when(userModel1).setCreated(any());
        doNothing().when(userModel1).setCredential(any());
        doNothing().when(userModel1).setDeleted(anyBoolean());
        doNothing().when(userModel1).setDob(any());
        doNothing().when(userModel1).setEmail(any());
        doNothing().when(userModel1).setFname(any());
        doNothing().when(userModel1).setId(any());
        doNothing().when(userModel1).setImageURL(any());
        doNothing().when(userModel1).setLname(any());
        doNothing().when(userModel1).setPassword(any());
        doNothing().when(userModel1).setPhone(any());
        doNothing().when(userModel1).setReservationModelBarber(any());
        doNothing().when(userModel1).setReservationModelClient(any());
        doNothing().when(userModel1).setRole(any());
        doNothing().when(userModel1).setUpdated(any());
        userModel1.setAddress(addressModel);
        userModel1.setCreated(LocalDate.ofEpochDay(1L));
        userModel1.setCredential(credentialModel1);
        userModel1.setDeleted(true);
        userModel1.setDob(LocalDate.ofEpochDay(1L));
        userModel1.setEmail("jane.doe@example.org");
        userModel1.setFname("Fname");
        userModel1.setId(123L);
        userModel1.setImageURL("https://example.org/example");
        userModel1.setLname("Lname");
        userModel1.setPassword("iloveyou");
        userModel1.setPhone("4105551212");
        userModel1.setReservationModelBarber(new HashSet<>());
        userModel1.setReservationModelClient(new HashSet<>());
        userModel1.setRole("Role");
        userModel1.setUpdated(LocalDate.ofEpochDay(1L));
        Optional<UserModel> ofResult = Optional.of(userModel1);
        when(this.userRepository.findById(any())).thenReturn(ofResult);
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.findUserById(123L));
        verify(this.userRepository).findById(any());
        verify(userModel1).getAddress();
        verify(userModel1).getId();
        verify(userModel1).setAddress(any());
        verify(userModel1).setCreated(any());
        verify(userModel1).setCredential(any());
        verify(userModel1).setDeleted(anyBoolean());
        verify(userModel1).setDob(any());
        verify(userModel1).setEmail(any());
        verify(userModel1).setFname(any());
        verify(userModel1).setId(any());
        verify(userModel1).setImageURL(any());
        verify(userModel1).setLname(any());
        verify(userModel1).setPassword(any());
        verify(userModel1).setPhone(any());
        verify(userModel1).setReservationModelBarber(any());
        verify(userModel1).setReservationModelClient(any());
        verify(userModel1).setRole(any());
        verify(userModel1).setUpdated(any());
    }

    @Test
    void testExistsUserByEmail() {
        when(this.userRepository.existsByEmail(any())).thenReturn(true);
        assertTrue(this.userServiceImpl.existsUserByEmail("jane.doe@example.org"));
        verify(this.userRepository).existsByEmail(any());
    }

    @Test
    void testExistsUserByEmail2() {
        when(this.userRepository.existsByEmail(any())).thenReturn(false);
        assertFalse(this.userServiceImpl.existsUserByEmail("jane.doe@example.org"));
        verify(this.userRepository).existsByEmail(any());
    }

    @Test
    void testExistsUserByEmail3() {
        when(this.userRepository.existsByEmail(any())).thenThrow(new UsernameNotFoundException("Msg"));
        assertThrows(UsernameNotFoundException.class, () -> this.userServiceImpl.existsUserByEmail("jane.doe@example.org"));
        verify(this.userRepository).existsByEmail(any());
    }

    @Test
    void testDeleteUserById() {
        doNothing().when(this.userRepository).deleteById(any());
        assertThrows(NoSuchElementException.class, () -> this.userServiceImpl.deleteUserById(any()));
    }

    @Test
    void testDeleteUserById2() {
        doNothing().when(this.userRepository).deleteById(any());
        when(this.userRepository.findById(any())).thenReturn(Optional.empty());
        assertThrows(NoSuchElementException.class, () -> this.userServiceImpl.deleteUserById(any()));
    }
}

